"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Base = /*#__PURE__*/function () {
  function Base(config) {
    _classCallCheck(this, Base);

    this.config = config;
    this.appName = '';
    this.accessToken = '';
    this.dtableServer = '';
    this.dtableSocket = '';
    this.lang = 'en';
    this.req = null;
  }

  _createClass(Base, [{
    key: "auth",
    value: function () {
      var _auth = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this = this;

        var response, _response$data, app_name, access_token, dtable_uuid, dtable_server, dtable_socket;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _utils.getAccessToken)(this.config);

              case 2:
                response = _context.sent;
                _response$data = response.data, app_name = _response$data.app_name, access_token = _response$data.access_token, dtable_uuid = _response$data.dtable_uuid, dtable_server = _response$data.dtable_server, dtable_socket = _response$data.dtable_socket;
                this.appName = app_name;
                this.accessToken = access_token;
                this.dtableServer = dtable_server;
                this.dtableSocket = dtable_socket;
                this.dtableUuid = dtable_uuid;
                this.req = _axios["default"].create({
                  baseURL: this.dtableServer,
                  headers: {
                    Authorization: 'Token ' + this.accessToken
                  }
                });
                this.req.interceptors.response.use(function (response) {
                  var result = _this.getResult(response);

                  return result;
                }, function (error) {
                  return Promise.reject(error);
                });

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function auth() {
        return _auth.apply(this, arguments);
      }

      return auth;
    }()
  }, {
    key: "getResult",
    value: function getResult(response) {
      var data = response.data,
          config = response.config;
      var method = config.method,
          url = config.url;
      var paths = url.split('/');
      var lastPath = paths[paths.length - 2];
      var result = data;

      if (method === 'get') {
        // metadata
        if (lastPath === 'metadata') {
          result = data.metadata;
          return result;
        } // list views


        if (lastPath === 'views') {
          result = data.views;
          return result;
        } // list rows


        if (lastPath === 'rows') {
          result = data.rows;
          return result;
        } // list columns


        if (lastPath === 'columns') {
          result = data.columns;
          return result;
        }
      }

      if (method === 'post' && lastPath === 'query') {
        result = data.results;
        return result;
      }

      return result;
    }
  }, {
    key: "getDTable",
    value: function getDTable() {
      var url = "dtables/".concat(this.dtableUuid, "/?lang=").concat(this.lang);
      return this.req.get(url);
    }
  }, {
    key: "getMetadata",
    value: function getMetadata() {
      var url = "/api/v1/dtables/".concat(this.dtableUuid, "/metadata/");
      return this.req.get(url);
    }
  }, {
    key: "addTable",
    value: function addTable(table_name, lang) {
      var url = "/api/v1/dtables/".concat(this.dtableUuid, "/tables/");
      var data = {
        table_name: table_name,
        lang: lang
      };
      return this.req.post(url, _objectSpread({}, data));
    }
  }, {
    key: "listViews",
    value: function listViews(table_name) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/views/");
      var params = {
        table_name: table_name
      };
      return this.req.get(url, {
        params: params
      });
    }
  }, {
    key: "listColumns",
    value: function listColumns(table_name, view_name) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/columns/");
      var params = {
        table_name: table_name,
        view_name: view_name
      };
      return this.req.get(url, {
        params: params
      });
    }
  }, {
    key: "insertColumn",
    value: function insertColumn(table_name, column_name, column_type, column_key, column_data) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/columns/");
      var data = {
        table_name: table_name,
        column_name: column_name,
        anchor_column: column_key,
        column_type: column_type,
        column_data: column_data
      };
      return this.req.post(url, _objectSpread({}, data));
    }
  }, {
    key: "renameColumn",
    value: function renameColumn(table_name, column_key, new_column_name) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/columns/");
      var data = {
        op_type: 'rename_column',
        table_name: table_name,
        column: column_key,
        new_column_name: new_column_name
      };
      return this.req.put(url, _objectSpread({}, data));
    }
  }, {
    key: "resizeColumn",
    value: function resizeColumn(table_name, column_key, new_column_width) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/columns/");
      var data = {
        op_type: 'resize_column',
        table_name: table_name,
        column: column_key,
        new_column_width: new_column_width
      };
      return this.req.put(url, _objectSpread({}, data));
    }
  }, {
    key: "freezeColumn",
    value: function freezeColumn(table_name, column_key, frozen) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/columns/");
      var data = {
        op_type: 'freeze_column',
        table_name: table_name,
        column: column_key,
        frozen: frozen
      };
      return this.req.put(url, _objectSpread({}, data));
    }
  }, {
    key: "moveColumn",
    value: function moveColumn(table_name, column_key, target_column_key) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/columns/");
      var data = {
        op_type: 'move_column',
        table_name: table_name,
        column: column_key,
        target_column: target_column_key
      };
      return this.req.put(url, _objectSpread({}, data));
    }
  }, {
    key: "modifyColumnType",
    value: function modifyColumnType(table_name, column_key, new_column_type) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/columns/");
      var data = {
        op_type: 'modify_column_type',
        table_name: table_name,
        column: column_key,
        new_column_type: new_column_type
      };
      return this.req.put(url, _objectSpread({}, data));
    }
  }, {
    key: "deleteColumn",
    value: function deleteColumn(table_name, column_key) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/columns/");
      var data = {
        table_name: table_name,
        column: column_key
      };
      return this.req["delete"](url, {
        data: data
      });
    }
  }, {
    key: "addColumnOptions",
    value: function addColumnOptions(table_name, column, options) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/column-options/");
      var data = {
        table_name: table_name,
        column: column,
        options: options
      };
      return this.req.post(url, _objectSpread({}, data));
    }
  }, {
    key: "addColumnCascadeSettings",
    value: function addColumnCascadeSettings(table_name, child_column, parent_column, cascade_settings) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/column-cascade-settings/");
      var data = {
        table_name: table_name,
        child_column: child_column,
        parent_column: parent_column,
        cascade_settings: cascade_settings
      };
      return this.req.post(url, _objectSpread({}, data));
    }
  }, {
    key: "listRows",
    value: function listRows(table_name, view_name, order_by, desc, start, limit) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/rows/");
      var params = {
        table_name: table_name,
        view_name: view_name,
        convert_link_id: true
      };
      params['direction'] = desc ? 'desc' : 'asc';

      if (order_by) {
        params['order_by'] = order_by;
      }

      if (start) {
        params['start'] = start;
      }

      if (limit) {
        params['limit'] = limit;
      }

      return this.req.get(url, {
        params: params
      });
    }
  }, {
    key: "appendRow",
    value: function appendRow(table_name, row_data) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/rows/");
      var data = {
        table_name: table_name,
        row: row_data
      };
      return this.req.post(url, _objectSpread({}, data));
    }
  }, {
    key: "insertRow",
    value: function insertRow(table_name, row_data, anchor_row_id) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/rows/");
      var data = {
        table_name: table_name,
        row: row_data,
        anchor_row_id: anchor_row_id
      };
      return this.req.post(url, _objectSpread({}, data));
    }
  }, {
    key: "deleteRow",
    value: function deleteRow(table_name, row_id) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/rows/");
      var data = {
        table_name: table_name,
        row_id: row_id
      };
      return this.req["delete"](url, {
        data: data
      });
    }
  }, {
    key: "updateRow",
    value: function updateRow(table_name, row_id, row_data) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/rows/");
      var data = {
        table_name: table_name,
        row_id: row_id,
        row: row_data
      };
      return this.req.put(url, _objectSpread({}, data));
    }
  }, {
    key: "getRow",
    value: function getRow(table_name, row_id) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/rows/").concat(row_id, "/");
      var params = {
        table_name: table_name
      };
      return this.req.get(url, {
        params: params
      });
    }
  }, {
    key: "batchAppendRows",
    value: function batchAppendRows(table_name, rows_data) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/batch-append-rows/");
      var data = {
        table_name: table_name,
        rows: rows_data
      };
      return this.req.post(url, _objectSpread({}, data));
    }
  }, {
    key: "batchDeleteRows",
    value: function batchDeleteRows(table_name, row_ids) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/batch-delete-rows/");
      var data = {
        table_name: table_name,
        row_ids: row_ids
      };
      return this.req["delete"](url, {
        data: data
      });
    }
  }, {
    key: "batchUpdateRows",
    value: function batchUpdateRows(table_name, rows_data) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/batch-update-rows/");
      var data = {
        table_name: table_name,
        updates: rows_data
      };
      return this.req.put(url, _objectSpread({}, data));
    }
  }, {
    key: "addLink",
    value: function addLink(link_id, table_name, other_table_name, row_id, other_row_id) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/links/");
      var data = {
        link_id: link_id,
        table_name: table_name,
        other_table_name: other_table_name,
        table_row_id: row_id,
        other_table_row_id: other_row_id
      };
      return this.req.post(url, _objectSpread({}, data));
    }
  }, {
    key: "updateLink",
    value: function updateLink(link_id, table_id, other_table_id, row_id, other_rows_ids) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/links/");
      var data = {
        link_id: link_id,
        table_id: table_id,
        other_table_id: other_table_id,
        row_id: row_id,
        other_rows_ids: other_rows_ids
      };
      return this.req.put(url, _objectSpread({}, data));
    }
  }, {
    key: "removeLink",
    value: function removeLink(link_id, table_name, other_table_name, row_id, other_row_id) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/links/");
      var data = {
        link_id: link_id,
        table_name: table_name,
        other_table_name: other_table_name,
        table_row_id: row_id,
        other_table_row_id: other_row_id
      };
      return this.req["delete"](url, {
        data: data
      });
    }
  }, {
    key: "batchUpdateLinks",
    value: function batchUpdateLinks(link_id, table_id, other_table_id, row_id_list, other_rows_ids_map) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/batch-update-links/");
      var data = {
        link_id: link_id,
        table_id: table_id,
        other_table_id: other_table_id,
        row_id_list: row_id_list,
        other_rows_ids_map: other_rows_ids_map
      };
      return this.req.put(url, _objectSpread({}, data));
    }
  }, {
    key: "getColumnLinkId",
    value: function getColumnLinkId(columns, column_name) {
      var column = columns.find(function (column) {
        return column.name === column_name;
      });

      if (!column) {
        return Promise.reject({
          error_message: 'column is not exist'
        });
      }

      if (column.type !== 'link') {
        return Promise.reject({
          error_message: "The column ".concat(column_name, " is not a link colum")
        });
      }

      return Promise.resolve(column.data['link_id']);
    }
  }, {
    key: "query",
    value: function query(sql) {
      var url = "api/v1/dtables/".concat(this.dtableUuid, "/query/");
      var data = {
        sql: sql
      };
      return this.req.post(url, _objectSpread({}, data));
    }
  }]);

  return Base;
}();

var _default = Base;
exports["default"] = _default;